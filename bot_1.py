import json
import random
import matplotlib.pyplot as plt
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤, –≤—É–∑–æ–≤ –∏ RIASEC-–Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
with open('questions.json', 'r', encoding='utf-8') as f:
    questions = json.load(f)
with open('universities.json', 'r', encoding='utf-8') as f:
    universities = json.load(f)
with open('riasec_specialties.json', 'r', encoding='utf-8') as f:
    riasec_specialties = json.load(f)

riasec_questions = questions['riasec']
values_questions = questions['values']
all_questions = riasec_questions + values_questions

# –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
directions = {
    "–¢–µ—Ö–Ω–∏–∫–∞ –∏ –∏–Ω–∂–µ–Ω–µ—Ä–∏—è": "R",
    "–ù–∞—É–∫–∞ –∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è": "I",
    "–ò—Å–∫—É—Å—Å—Ç–≤–æ –∏ —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–æ": "A",
    "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –∏ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ": "S",
    "–ë–∏–∑–Ω–µ—Å –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ": "E",
    "–û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∞": "C"
}

# –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠ (–Ω–∞ –æ—Å–Ω–æ–≤–µ universities.json)
ege_subjects = [
    "—Ä—É—Å—Å–∫–∏–π", "–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞", "—Ñ–∏–∑–∏–∫–∞", "—Ö–∏–º–∏—è", "–±–∏–æ–ª–æ–≥–∏—è", "–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞",
    "–æ–±—â–µ—Å—Ç–≤–æ–∑–Ω–∞–Ω–∏–µ", "–∏—Å—Ç–æ—Ä–∏—è", "–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞", "–∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω—ã–π —è–∑—ã–∫", "–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ"
]

# –ì–æ—Ä–æ–¥–∞
cities = ["–ú–æ—Å–∫–≤–∞", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "–ö–∞–∑–∞–Ω—å"]

# –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º
value_priorities = {
    "–î–æ—Ö–æ–¥": ["–ë–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ü—Ä–∏–∫–ª–∞–¥–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–≠–∫–æ–Ω–æ–º–∏–∫–∞", "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è"],
    "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å": ["–ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–æ–µ –∏ –º—É–Ω–∏—Ü–∏–ø–∞–ª—å–Ω–æ–µ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ", "–Æ—Ä–∏—Å–ø—Ä—É–¥–µ–Ω—Ü–∏—è", "–≠–∫–æ–Ω–æ–º–∏–∫–∞"],
    "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —Å–≤–æ–±–æ–¥–∞": ["–ñ—É—Ä–Ω–∞–ª–∏—Å—Ç–∏–∫–∞", "–î–∏–∑–∞–π–Ω", "–ò–∑–¥–∞—Ç–µ–ª—å—Å–∫–æ–µ –¥–µ–ª–æ", "–†–µ–∫–ª–∞–º–∞ –∏ —Å–≤—è–∑–∏ —Å –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å—é"],
    "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å": ["–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è", "–ü—Å–∏—Ö–æ–ª–æ–≥–æ-–ø–µ–¥–∞–≥–æ–≥–∏—á–µ—Å–∫–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–°–æ—Ü–∏–æ–ª–æ–≥–∏—è"],
    "–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç": ["–ë–∏–∑–Ω–µ—Å-–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞", "–ú–µ–Ω–µ–¥–∂–º–µ–Ω—Ç", "–≠–∫–æ–Ω–æ–º–∏–∫–∞"],
    "–ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –∂–∏–∑–Ω–∏": ["–¢—É—Ä–∏–∑–º", "–§–∏–ª–æ–ª–æ–≥–∏—è", "–≠–∫–æ–ª–æ–≥–∏—è –∏ –ø—Ä–∏—Ä–æ–¥–æ–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ"]
}


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å JSON
def load_users():
    try:
        with open('users.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except (FileNotFoundError, json.JSONDecodeError):
        return {}


def save_users(users):
    with open('users.json', 'w', encoding='utf-8') as f:
        json.dump(users, f, ensure_ascii=False, indent=2)


# –ù–∞—á–∞–ª–æ —Ç–µ—Å—Ç–∞
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    users = load_users()

    if chat_id in users and users[chat_id].get('completed', False):
        await update.message.reply_text(
            "–¢—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /myresults, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã, –∏–ª–∏ /restart, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∑–∞–Ω–æ–≤–æ.")
    else:
        question_order = list(range(len(all_questions)))
        random.shuffle(question_order)
        users[chat_id] = {
            'current_question': 0,
            'completed': False,
            'initial_directions': [],
            'answers': [],
            'question_order': question_order,
            'current_options': {},
            'university_test': {'stage': None}
        }
        save_users(users)
        await update.message.reply_text(
            "–ü—Ä–∏–≤–µ—Ç! üëã –î–∞–≤–∞–π —É–∑–Ω–∞–µ–º, –∫–∞–∫–æ–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏—è —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥–∏—Ç. –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å.")
        await ask_initial_directions(update, context, chat_id)


# –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞
async def restart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    users = load_users()

    question_order = list(range(len(all_questions)))
    random.shuffle(question_order)
    users[chat_id] = {
        'current_question': 0,
        'completed': False,
        'initial_directions': [],
        'answers': [],
        'question_order': question_order,
        'current_options': {},
        'university_test': {'stage': None}
    }
    save_users(users)
    await update.message.reply_text(
        "–¢–µ—Å—Ç —Å–±—Ä–æ—à–µ–Ω! –î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º –∑–∞–Ω–æ–≤–æ. –í—ã–±–µ—Ä–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å.")
    await ask_initial_directions(update, context, chat_id)


# –ù–∞—á–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å
async def ask_initial_directions(update: Update, context: ContextTypes.DEFAULT_TYPE, chat_id: str):
    users = load_users()
    user = users.get(chat_id, {'initial_directions': []})
    selected_directions = user['initial_directions']

    remaining_directions = [d for d in directions.keys() if d not in selected_directions]
    keyboard = [[direction] for direction in remaining_directions] + [["–ì–æ—Ç–æ–≤–æ"]]

    await update.message.reply_text(
        f"–í –∫–∞–∫–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö —Ç—ã —Ö–æ—Ç–µ–ª –±—ã —Ä–∞–±–æ—Ç–∞—Ç—å? –í—ã–±–µ—Ä–∏ –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –∑–∞—Ç–µ–º –Ω–∞–∂–º–∏ '–ì–æ—Ç–æ–≤–æ'.\n–í—ã–±—Ä–∞–Ω–æ: {', '.join(selected_directions) if selected_directions else '–Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ'}.",
        reply_markup={'keyboard': keyboard, 'one_time_keyboard': True}
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def handle_initial_directions(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    answer_text = update.message.text
    users = load_users()

    if chat_id not in users:
        question_order = list(range(len(all_questions)))
        random.shuffle(question_order)
        users[chat_id] = {
            'current_question': 0,
            'completed': False,
            'initial_directions': [],
            'answers': [],
            'question_order': question_order,
            'current_options': {},
            'university_test': {'stage': None}
        }

    user = users[chat_id]

    if answer_text == "–ì–æ—Ç–æ–≤–æ":
        if not user['initial_directions']:
            await update.message.reply_text("–í—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ —Ç–µ–º, –∫–∞–∫ –Ω–∞–∂–∞—Ç—å '–ì–æ—Ç–æ–≤–æ'.")
            await ask_initial_directions(update, context, chat_id)
        else:
            user['current_question'] = 1
            save_users(users)
            await update.message.reply_text("–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –æ—Ç–≤–µ—Ç—å –Ω–∞ 50 –≤–æ–ø—Ä–æ—Å–æ–≤ —Ç–µ—Å—Ç–∞.")
            await ask_question(update, context, 1, chat_id)
    elif answer_text in directions:
        if answer_text not in user['initial_directions']:
            user['initial_directions'].append(answer_text)
            save_users(users)
        await ask_initial_directions(update, context, chat_id)
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω–æ –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –∏–ª–∏ '–ì–æ—Ç–æ–≤–æ'.")
        await ask_initial_directions(update, context, chat_id)


# –ó–∞–¥–∞–≤–∞–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
async def ask_question(update: Update, context: ContextTypes.DEFAULT_TYPE, question_index: int, chat_id: str):
    users = load_users()
    user = users.get(chat_id)

    if not user or 'question_order' not in user:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Ç–µ—Å—Ç —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    if question_index <= len(all_questions):
        question_idx = user['question_order'][question_index - 1]
        question = all_questions[question_idx]

        options = list(question['options'].items())
        random.shuffle(options)
        options_dict = dict(options)
        options_text = [value for _, value in options]

        keyboard = [[option] for option in options_text]
        await update.message.reply_text(
            question['question'],
            reply_markup={'keyboard': keyboard, 'one_time_keyboard': True}
        )
        user['current_options'] = options_dict
        save_users(users)
    else:
        await complete_test(update, context)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
async def handle_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    answer_text = update.message.text
    users = load_users()

    if chat_id not in users:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Ç–µ—Å—Ç —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    user = users[chat_id]
    current_question = user['current_question']
    university_test = user.get('university_test', {'stage': None})

    # –ü—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–π —Ç–µ—Å—Ç
    if current_question == 0:
        await handle_initial_directions(update, context)
    elif current_question <= len(all_questions):
        question_idx = user['question_order'][current_question - 1]
        question_type = 'riasec' if question_idx < len(riasec_questions) else 'values'

        current_options = user.get('current_options', {})
        try:
            answer_key = next(key for key, value in current_options.items() if value == answer_text)
            user['answers'].append({'question_type': question_type, 'answer': answer_key})
            user['current_question'] = current_question + 1
            save_users(users)
            await ask_question(update, context, user['current_question'], chat_id)
        except StopIteration:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤.")
            await ask_question(update, context, current_question, chat_id)
    # –¢–µ—Å—Ç –Ω–∞ –≤—ã–±–æ—Ä –≤—É–∑–∞
    elif university_test['stage'] == 'subjects':
        selected_subjects = [s.strip().lower() for s in answer_text.split(',')]
        invalid_subjects = [s for s in selected_subjects if s not in ege_subjects]
        if invalid_subjects:
            await update.message.reply_text(
                f"–ù–µ–∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã ({', '.join(invalid_subjects)}) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –í—ã–±–µ—Ä–∏ –∏–∑: {', '.join(ege_subjects)}. –£–∫–∞–∂–∏ –ø—Ä–µ–¥–º–µ—Ç—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é.")
            return
        user['university_test']['subjects'] = selected_subjects
        user['university_test']['stage'] = 'city'
        save_users(users)
        keyboard = [[city] for city in cities]
        await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∏—Ç—å—Å—è?",
                                        reply_markup={'keyboard': keyboard, 'one_time_keyboard': True})
    elif university_test['stage'] == 'city':
        if answer_text not in cities:
            await update.message.reply_text(f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –≥–æ—Ä–æ–¥: {', '.join(cities)}.")
            keyboard = [[city] for city in cities]
            await update.message.reply_text("–í –∫–∞–∫–æ–º –≥–æ—Ä–æ–¥–µ —Ç—ã —Ö–æ—á–µ—à—å —É—á–∏—Ç—å—Å—è?",
                                            reply_markup={'keyboard': keyboard, 'one_time_keyboard': True})
            return
        user['university_test']['city'] = answer_text
        user['university_test']['stage'] = 'paid'
        save_users(users)
        keyboard = [["–î–∞"], ["–ù–µ—Ç"]]
        await update.message.reply_text("–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å –ª–∏ —Ç—ã –ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
                                        reply_markup={'keyboard': keyboard, 'one_time_keyboard': True})
    elif university_test['stage'] == 'paid':
        if answer_text not in ["–î–∞", "–ù–µ—Ç"]:
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ '–î–∞' –∏–ª–∏ '–ù–µ—Ç'.")
            keyboard = [["–î–∞"], ["–ù–µ—Ç"]]
            await update.message.reply_text("–†–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å –ª–∏ —Ç—ã –ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ?",
                                            reply_markup={'keyboard': keyboard, 'one_time_keyboard': True})
            return
        user['university_test']['paid'] = answer_text == "–î–∞"
        save_users(users)
        await recommend_universities(update, context)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞
async def complete_test(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    users = load_users()
    user = users.get(chat_id)

    if not user or not user['answers']:
        await update.message.reply_text("–¢—ã –µ—â–µ –Ω–µ –ø—Ä–æ—Ö–æ–¥–∏–ª —Ç–µ—Å—Ç. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    # –ê–Ω–∞–ª–∏–∑ RIASEC
    riasec_answers = [a['answer'] for a in user['answers'] if a['question_type'] == 'riasec']
    riasec_scores = {typ: riasec_answers.count(typ) for typ in 'RIASEC'}
    top_riasec = sorted(riasec_scores, key=riasec_scores.get, reverse=True)[:2]

    # –ê–Ω–∞–ª–∏–∑ —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π
    values_answers = [a['answer'] for a in user['answers'] if a['question_type'] == 'values']
    values_scores = {val: values_answers.count(val) for val in
                     ["–î–æ—Ö–æ–¥", "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —Å–≤–æ–±–æ–¥–∞", "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å", "–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç",
                      "–ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –∂–∏–∑–Ω–∏"]}
    top_values = sorted(values_scores, key=values_scores.get, reverse=True)[:2]

    # –°—Ä–∞–≤–Ω–µ–Ω–∏–µ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    initial_riasec = {directions[d] for d in user['initial_directions']}
    match = initial_riasec.issuperset(top_riasec) or initial_riasec.intersection(top_riasec)

    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
    plt.figure(figsize=(8, 4))
    plt.bar(riasec_scores.keys(), riasec_scores.values(), color='skyblue')
    plt.title('–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å RIASEC')
    plt.savefig('riasec.png')
    plt.close()

    plt.figure(figsize=(8, 4))
    plt.bar(values_scores.keys(), values_scores.values(), color='lightgreen')
    plt.title('–¢–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏')
    plt.savefig('values.png')
    plt.close()

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    recommendations = generate_recommendations(top_riasec, top_values, user['initial_directions'], match)
    await update.message.reply_text(f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: {''.join(top_riasec)}. –¢–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(top_values)}.")
    await update.message.reply_text(recommendations)
    await update.message.reply_photo(open('riasec.png', 'rb'))
    await update.message.reply_photo(open('values.png', 'rb'))

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–∞ –Ω–∞ –≤—ã–±–æ—Ä –≤—É–∑–∞
    users[chat_id] = {
        'completed': True,
        'riasec_profile': ''.join(top_riasec),
        'top_values': top_values,
        'university_test': {
            'stage': 'subjects',
            'subjects': [],
            'city': None,
            'paid': None
        }
    }
    save_users(users)
    await update.message.reply_text(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –¥–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º –≤—É–∑ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ. –ö–∞–∫–∏–µ –ø—Ä–µ–¥–º–µ—Ç—ã –ï–ì–≠ —Ç—ã —Å–¥–∞—ë—à—å –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä—É–µ—à—å —Å–¥–∞–≤–∞—Ç—å? –£–∫–∞–∂–∏ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ä—É—Å—Å–∫–∏–π, –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, —Ñ–∏–∑–∏–∫–∞). –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: " + ', '.join(
            ege_subjects))


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
def generate_recommendations(top_riasec, top_values, initial_directions, match):
    base_recommendation = ""
    if set(top_riasec) == {'R', 'I'}:
        if "–î–æ—Ö–æ–¥" in top_values:
            base_recommendation = "–¢–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –ò–Ω–∂–µ–Ω–µ—Ä–∏—è. –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏: –ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –ò–Ω–∂–µ–Ω–µ—Ä."
        else:
            base_recommendation = "–¢–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –ù–∞—É–∫–∞, –¢–µ—Ö–Ω–∏–∫–∞. –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏: –£—á–µ–Ω—ã–π, –¢–µ—Ö–Ω–∏–∫."
    elif set(top_riasec) == {'A', 'S'}:
        if "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —Å–≤–æ–±–æ–¥–∞" in top_values:
            base_recommendation = "–¢–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –î–∏–∑–∞–π–Ω, –ò—Å–∫—É—Å—Å—Ç–≤–æ. –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏: –î–∏–∑–∞–π–Ω–µ—Ä, –•—É–¥–æ–∂–Ω–∏–∫."
        else:
            base_recommendation = "–¢–µ–±–µ –ø–æ–¥–æ–π–¥—É—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è: –°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ. –ü—Ä–æ—Ñ–µ—Å—Å–∏–∏: –°–æ—Ü–∏–∞–ª—å–Ω—ã–π —Ä–∞–±–æ—Ç–Ω–∏–∫, –£—á–∏—Ç–µ–ª—å."
    else:
        base_recommendation = f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: {''.join(top_riasec)}. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å {', '.join(top_riasec)}."

    if match:
        return f"{base_recommendation}\n–û—Ç–ª–∏—á–Ω–æ! –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –≤—ã–±—Ä–∞–ª –≤ –Ω–∞—á–∞–ª–µ ({', '.join(initial_directions)}), —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞. –¢—ã –Ω–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø—É—Ç–∏!"
    else:
        return f"{base_recommendation}\n–¢–≤–æ–∏ –Ω–∞—á–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è ({', '.join(initial_directions)}) –Ω–µ —Å–æ–≤—Å–µ–º —Å–æ–≤–ø–∞–¥–∞—é—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ —Ç–µ—Å—Ç–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ–º –æ–±—Ä–∞—Ç–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã–µ —Ç–µ—Å—Ç–æ–º!"


# –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—É–∑–∞–º
async def recommend_universities(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    users = load_users()
    user = users.get(chat_id)

    if not user or not user.get('university_test'):
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏ —Ç–µ—Å—Ç —Å –∫–æ–º–∞–Ω–¥—ã /start.")
        return

    riasec_profile = user.get('riasec_profile', '')
    top_values = user.get('top_values', [])
    subjects = user['university_test']['subjects']
    city = user['university_test']['city']
    paid = user['university_test']['paid']

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π
    recommendations = []
    for university in universities:
        if university['city'] != city:
            continue
        for specialty in university['specialties']:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ (–≤—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Å–ø–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∏–ª–∏ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å "–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ")
            if "–≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ" not in specialty['ege_subjects'] and not all(
                    subject in subjects for subject in specialty['ege_subjects']):
                continue
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ RIASEC
            if not any(specialty['name'] in riasec_specialties[typ] for typ in riasec_profile):
                continue
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–Ω–æ–≥–æ/–±—é–¥–∂–µ—Ç–Ω–æ–≥–æ
            if not paid and (specialty['budget_places'] is None or specialty['budget_places'] == 0):
                continue
            # –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º
            value_score = sum(1 for value in top_values if specialty['name'] in value_priorities.get(value, []))

            recommendations.append({
                'university': university['university_name'],
                'specialty': specialty['name'],
                'city': university['city'],
                'budget_score': specialty['budget_score'],
                'paid_score': specialty['paid_score'],
                'budget_places': specialty['budget_places'],
                'paid_places': specialty['paid_places'],
                'cost': specialty['cost'],
                'ege_subjects': specialty['ege_subjects'],
                'study_mode': specialty['study_mode'],
                'value_score': value_score
            })

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ü–µ–Ω–Ω–æ—Å—Ç—è–º –∏ –≤—ã–±–æ—Ä –¥–æ 5
    recommendations = sorted(recommendations, key=lambda x: x['value_score'], reverse=True)[:5]

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    if not recommendations:
        await update.message.reply_text(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–º–µ—Ç—ã, –≥–æ—Ä–æ–¥ –∏–ª–∏ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ—Ç—å –ø–ª–∞—Ç–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é /restart.")
    else:
        response = "–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è:\n\n"
        for rec in recommendations:
            response += f"üèõÔ∏è {rec['university']} ({rec['city']})\n"
            response += f"üìö –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {rec['specialty']}\n"
            response += f"üìã –¢—Ä–µ–±—É–µ–º—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: {', '.join(rec['ege_subjects'])}\n"
            response += f"üìñ –§–æ—Ä–º–∞ –æ–±—É—á–µ–Ω–∏—è: {rec['study_mode'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n"
            if rec['budget_places']:
                response += f"üÜì –ë—é–¥–∂–µ—Ç: {rec['budget_places']} –º–µ—Å—Ç, –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {rec['budget_score'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
            if paid and rec['paid_places']:
                response += f"üí∏ –ü–ª–∞—Ç–Ω–æ–µ: {rec['paid_places']} –º–µ—Å—Ç, –ø—Ä–æ—Ö–æ–¥–Ω–æ–π –±–∞–ª–ª: {rec['paid_score'] or '–Ω–µ —É–∫–∞–∑–∞–Ω'}, —Å—Ç–æ–∏–º–æ—Å—Ç—å: {rec['cost'] or '–Ω–µ —É–∫–∞–∑–∞–Ω–∞'} —Ä—É–±./–≥–æ–¥\n"
            response += "\n"
        await update.message.reply_text(response)

    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    users[chat_id] = {
        'completed': True,
        'riasec_profile': user['riasec_profile'],
        'top_values': user['top_values']
    }
    save_users(users)


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def myresults(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = str(update.message.chat_id)
    users = load_users()

    if chat_id in users and users[chat_id].get('completed', False):
        riasec_profile = users[chat_id]['riasec_profile']
        top_values = users[chat_id]['top_values']

        riasec_scores = {typ: 1 if typ in riasec_profile else 0 for typ in 'RIASEC'}
        plt.figure(figsize=(8, 4))
        plt.bar(riasec_scores.keys(), riasec_scores.values(), color='skyblue')
        plt.title('–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å RIASEC')
        plt.savefig('riasec.png')
        plt.close()

        values_scores = {val: 1 if val in top_values else 0 for val in
                         ["–î–æ—Ö–æ–¥", "–°—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å", "–¢–≤–æ—Ä—á–µ—Å–∫–∞—è —Å–≤–æ–±–æ–¥–∞", "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å", "–ö–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç",
                          "–ë–∞–ª–∞–Ω—Å —Ä–∞–±–æ—Ç—ã –∏ –∂–∏–∑–Ω–∏"]}
        plt.figure(figsize=(8, 4))
        plt.bar(values_scores.keys(), values_scores.values(), color='lightgreen')
        plt.title('–¢–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏')
        plt.savefig('values.png')
        plt.close()

        await update.message.reply_text(f"–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å: {riasec_profile}. –¢–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏: {', '.join(top_values)}.")
        await update.message.reply_text(generate_recommendations(list(riasec_profile), top_values, [], True))
        await update.message.reply_photo(open('riasec.png', 'rb'))
        await update.message.reply_photo(open('values.png', 'rb'))
    else:
        await update.message.reply_text(
            "–¢—ã –µ—â–µ –Ω–µ –∑–∞–≤–µ—Ä—à–∏–ª —Ç–µ—Å—Ç. –ù–∞—á–Ω–∏ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏ –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã!")


# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = Application.builder().token("8002126599:AAF30u86GTRehtsqndQ_flLyBf8v2qvs6bQ").build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("restart", restart))
    app.add_handler(CommandHandler("myresults", myresults))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_answer))

    app.run_polling()


if __name__ == '__main__':
    main()